// single line comment

/* 
    multi
    line
    comment
*/

type Test1;
alias Test10 = Test1;
type Test2 (i64, i64);
type Test3 {
    x: i64,
    y: i64,
    z: Test,
}
type Test4
    = V1 
    | V2 
    | V3 (i64, i64)
    | V4 { x: i64, y: i64 }
    ;
alias Test4 = enumer;

fn function1() {
    x: f64;
    y: i64 = 1 + 16 * 3 - 2;
    z: i64 = 6;
    5 + 3;
    z = 5 + 5;
} 

fn function2() -> i64 {
    x: i64 = 4;
    z: i64 = 1 + x;
    return z * x;
}

fn function3() -> f64 {
    t : bool = true;
    f : bool = false;
    return 10 - 3;
}

fn i64_comparisons() {
    x: i64 = 4;
    y: i64 = 5;
    
    c1 : bool = x == y;
    c2 : bool = x != y;
    c3 : bool = x < y;
    c4 : bool = x > y;
    c5 : bool = x <= y;
    c6 : bool = x >= y;
}

fn bool_operations() -> bool {
    t : bool = true;
    f : bool = false;
    return t && f || t;
}

fn function_call() -> bool {
    x: i64 = function3();
    return true;
}

fn unops() {
    x: i64 = 4;
    nx: i64 = -x;
    y: f64 = 4.0;
    ny: f64 = -y;
    t: bool = true;
    f: bool = !t;
}

fn blocks() -> i64 {
    x: i64 = 4;
    y: i64 = 5;
    {
        x = 5;
        y = 6;
    }
    {
        x: i64 = 10;
        y: i64 = 11;
    }
    return x + y;
}


fn main() {}
