use std::str::FromStr;
use crate::ast::{Expr, OpCode};
use lalrpop_util::ParseError;
use super::Calculator6Error;


grammar;

extern {
    type Error = Calculator6Error;
}

Tier<Op, NextTier>: Box<Expr> = {
    Tier<Op, NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier,
}

pub Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

Term = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")",
}

Num: i32 = {
    r"[0-9]+" =>? i32::from_str(<>).map_err(|_| ParseError::User {
        error: Calculator6Error::InputTooLarge,
    }).and_then(|n| {
        if n % 2 == 0 {
            return Err(ParseError::User {
                error: Calculator6Error::EvenNumber,
            });
        } 
        Ok(n)
    }),
}

ExprOp: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Sub,
}

FactorOp: OpCode = {
    "*" => OpCode::Mul,
    "/" => OpCode::Div,
}
